using Application.Commands.UserCommands;
using Application.DTO.UserDto;
using Application.Exceptions;
using Application.Interfaces;
using Application.Validators.UserValidators;
using EfDataAccess;
using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace EfCommands.EfUserCommands
{
    public class EfAddUserCommand : EfBaseCommand, IAddUserCommand
    {
        protected readonly UserValidator _validator;
        public EfAddUserCommand(EfContext context, UserValidator validator) 
            : base(context)
        {
            _validator = validator;
        }

        public int Id => 74;

        public string Name => "Add New User Using EF";

        public IEnumerable<Role> Roles => new List<Role>() { Role.Admin };

        public bool ContainsSensitiveData => true;

        public void Execute(UserDto request)
        {
            _validator.ValidateAndThrow(request);

            if (Context.Users.Any(u => u.Email == request.Email))
                throw new EntityAlreadyExistsException(request.Email);

            byte[] passwordHash, passwordKey;

            using (var hmac = new HMACSHA512())
            {
                //random key generated by Hash-Based Message Authentication Code (hmac)
                passwordKey = hmac.Key;
                passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(request.Password));
            }


            Context.Users.Add(new Domain.User
            {
                FirstName = request.FirstName,
                LastName = request.LastName,
                Email = request.Email,
                Password = passwordHash,
                PasswordKey = passwordKey,
                RoleId = request.RoleId,
                TheatreId = request.TheatreId,
                Status = (Domain.User.StatusType)Enum.Parse(typeof(StatusType), request.Status)
        });

            Context.SaveChanges();

        }
    }
}
